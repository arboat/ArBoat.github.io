<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on ArBlog</title>
    <link>https://blog.arboat.top/tags/mysql/</link>
    <description>Recent content in mysql on ArBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 May 2020 00:00:03 +0000</lastBuildDate>
    
	<atom:link href="https://blog.arboat.top/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql 事务和锁整理</title>
      <link>https://blog.arboat.top/posts/mysql-transaction/</link>
      <pubDate>Fri, 01 May 2020 00:00:03 +0000</pubDate>
      
      <guid>https://blog.arboat.top/posts/mysql-transaction/</guid>
      <description>事务： begin，start transaction 可以加修饰： read only / read write / with consistent snapshot
  脏读(发生回滚)、不可重复读（读过程被修改不一致）、幻读（新加了一条）。
  隔离级别
 脏读， 不可重复读， 幻影写 未提交读 已提交读 x 可重复读 x x (innoDB x) 串行化 x x x  隔离级别越高，事务的并发度就越低。唯一的区别就在于，InnoDB 在可重复读（REPEATABLE READ）的级别就解决了幻读的问题。这也是InnoDB使用可重复读 作为事务默认隔离级别的原因
  读-读即并发事务同时访问同一行数据记录。由于两个事务都进行只读操作，不会对记录造成任何影响，因此并发读完全允许。
  写-写即并发事务同时修改同一行数据记录。这种情况下可能导致脏写问题，这是任何情况下都不允许发生的，因此只能通过加锁实现，也就是当一个事务需要对某行记录进行修改时，首先会先给这条记录加锁，如果加锁成功则继续执行，否则就排队等待，事务执行完成或回滚会自动释放锁。
  读-写即一个事务进行读取操作，另一个进行写入操作。这种情况下可能会产生ww最好的方案是读操作利用多版本并发控制（MVCC），写操作进行加锁。
  按锁作用的数据范围进行分类的话，锁可以分为行级锁和表级锁。
   行级锁：作用在数据行上，锁的粒度比较小。 表级锁：作用在整张数据表上，锁的粒度比较大。    为了实现读-读之间不受影响，并且写-写、读-写之间能够相互阻塞，Mysql使用了读写锁的思路进行实现，具体来说就是分为了共享锁和排它锁：
 共享锁(Shared Locks)：简称S锁，在事务要读取一条记录时，需要先获取该记录的S锁。S锁可以在同一时刻被多个事务同时持有。我们可以用select ...... lock in share mode;的方式手工加上一把S锁。 排他锁(Exclusive Locks)：简称X锁，在事务要改动一条记录时，需要先获取该记录的X锁。X锁在同一时刻最多只能被一个事务持有。X锁的加锁方式有两种，第一种是自动加锁，在对数据进行增删改的时候，都会默认加上一个X锁。还有一种是手工加锁，我们用一个FOR UPDATE给一行数据加上一个X锁【行锁】 意向锁可以认为是S锁和X锁在数据表上的标识，通过意向锁可以快速判断表中是否有记录被上锁，从而避免通过遍历的方式来查看表中有没有记录被上锁，提升加锁效率.</description>
    </item>
    
    <item>
      <title>mysql 索引整理</title>
      <link>https://blog.arboat.top/posts/mysql-index/</link>
      <pubDate>Fri, 01 May 2020 00:00:02 +0000</pubDate>
      
      <guid>https://blog.arboat.top/posts/mysql-index/</guid>
      <description>基础  客户端和服务端用tcp通信，默认端口3306 服务端： 连接管理， 解析和优化，存储引擎 查询缓存： 更新表后实效， 查询字符有区别，包含系统或一些自建函数回失效（now函数） 存储引擎： InnoDB(支持外键、行锁、事务), MyISAM, Memory InnoDB: 划分页， 用来磁盘和内存交互， 一般16kb InnoDB 分为7个页， 页记录串联单向链表， 生成页目录，主键用二分查找槽，再遍历  索引  索引： 页分裂 ；record_type : 0:普通；1:索引目录；2：最小值；3: 最大值 ，索引即是数据 B+叶子节点存储所有记录， 一般不超过4层 聚簇索引：主键的索引 二级索引：用其他和主键一起，先找出主键，在找聚簇索引 联合索引： 多个其他和主键一起 一个b+索引创建了就不会移动位置 MyISAM： 索引和数据分开存储， 相当都是二级索引 索引的代价： 以空间换时间 全值匹配： 正好所有索引, where 顺序无影响 匹配左边的列，匹配列前缀， 联合索引最左边，或精确的下一个可以用到b+索引 排序不能用索引及情况： 1.联合索引排序列asc和desc一致 2.不在同一索引 3。 where中出现非索引；4不能用复杂表达式 需要回表的数据越多，二级索引效率越低 建立索引规则：1.只为搜索排序分组的列建索引。2. 只为基数大的建立索引；3.索引列类型尽量小；4.字符串鼓励用前缀（但不支持排序） 主键 auto_increment; 避免重复  </description>
    </item>
    
  </channel>
</rss>